a)
#include <iostream>
#include <unistd.h>
#include <stdlib.h>
using namespace std;
int main(){
pid_t p1, p2;
p2 = fork();
p1 = getpid();
if (p2 < 0){
cout << "Error in creating child process" << endl;
return 1;
}
cout << "Fork ID = " << p2 << endl;
cout << "Process ID = " << p1 << endl;
return 0;
}
b)
#include <iostream>
#include <unistd.h>
#include <stdlib.h>
using namespace std;
int main(){
pid_t p1, p2;
p2 = fork();
p1 = getpid();
if (p2 < 0){
cout << "Error in creating child process" << endl;
return 1;
}
cout << "Fork ID = " << p2 << endl;
cout << "Process ID = " << p1 << endl;
return 0;
}
c)
#include <iostream>
#include <unistd.h>
#include <sys/wait.h>
using namespace std;
void parentWaitForChild()
{
pid_t pidFork;
pidFork = fork();
if(pidFork < 0)
cout << "\nError in fork...";
else if(pidFork == 0)
cout << "\nChild executed\nProcess ID : " << getpid() << "\nParent Process ID : 
" << getppid() << endl;
else
{
wait(NULL);
cout << "\nParent executed\nProcess ID : " << getpid() << "\nParent Process ID : 
" << getppid() << endl;
}
return;
}
int main()
{
parentWaitForChild();
}
